Node Js --> Multipurpose programming language 
Used for , 
DOM manipulation
API, Game development, ML and Robotics

JS only works inside the browser, we can't run outside of the browser
Do only for HTML and CSS and DOM manipulation

2009 -ryan dahl created Node JS -JS Runtime (Its a piece of S/w), so we can run in outside
As like  node js --> Deno, Bun (latest)
 
So we can use outside 

----------------------------------------

Inside the browser also we have engine that is V8 engine is used to run JavaScript, nodejs also use the same engine, so there are much more powers like 
1. Access OS 
2. Access Files
3. Access Network

npmjs --> main js library


----------------------------------------------

Download steps
 search nodejs --> nodejs.org/download --> download (lts) --> msi64bit(based on pc) --> Install --> Done 


 To check installed/not 
 node -v


-------------------------------------------------

We can't do DOM manipulation until and unless we have html file. 

Arrays , Object, Loops are run anywhere like inside and outside of the browser

console.log("Hello Node");

let data = [1,2,3,4,5]
console.log(data[3])

data.forEach((element, index, arr)=>{
  console.log(element)
})


let stud =[{
  name: "Pannu",
  age :20
},
{
  name:"Pavani",
  age :20
}
]

console.log(stud)
console.log(JSON.stringify(stud))


------------------------------------------------
While installing -->
1. Runtime
2. npm
3. PATH
4. Docs
5. COre Packages --> As like functions that we created, inside a file when we created

Basic Def :
1. A function is a block of code that can do some specific task
2. When creating a multiple related functions inside a file that is called a module. (or) Module can be defined as a collection of functions
3. Collection of multiple modules are called as package/library

----------------------------------------

1. fs module -> File System Module -> To read and write Files.


//importing File System Module
const fs =require('fs')  

//reading a file in a sync way

console.log("-------Reading file in Sync-------------")
let data =fs.readFileSync('./test.txt','utf-8' );  
console.log(data);
console.log("Hello");

//reading a file in async way
console.log("-------Reading file in Async-------------")
fs.readFile('./test.txt', 'utf-8', (err, data)=>{
  console.log(err);
  console.log(data);

})
console.log("Test code")

// writing the file in sync way
console.log("------Writing file in Sync------");
fs.writeFileSync("./pannu.txt", "Intelligent girl")
console.log("Writing file successfully..!")

// writing the file in Async way
console.log("------Writing file in Async------");
fs.writeFile("./pannu.txt","Topper", (err)=>{
    console.log(err)
    console.log("Writing file successfully..!")

})

fs.readFile("./pannu.txt",'utf-8', (data, err)=>{
  console.log(data)
  console.log(err)
} )

// writing file will always overwrite the existing data, to keep the existing data, we use append

fs.appendFile('./pannu.txt','\nGood Girl', (err)=>{
  console.log(err);
  console.log("File append Successfully")
})

// delete a file
// fs.unlinkSync('./pannu.txt')

//OS MODULE
const os = require('os');

console.log(os.platform());
console.log(os.hostname());
console.log(os.freemem());
console.log(os.homedir());



------------------------------DAY-2----------------------------

API --> Application Programming Interface
A server is a computer or a software which is running continuously ad its job is to provides service, means if someone is asking, that program can run and make action..!
For frontend , API and for database we use 3 different servers 
If we have to use all three in a single server, we can get conflicts, as we work with different url's port numbers , we use different servers.
client --> sending request --> server
server --> giving response --> client
These are communicaate only on internet, 
To communicate mainly the need is ADDRESS, that's y every device has unique address that is "IP Address"

Components of a REQUEST 

1. Address / Base/ IP Address : The client doesn't make the request when the client doesn't know that IP Address.
2. Route : After reaching the server --> multiple functionalities (API's) --> which functionlity to call 
3. Method : To create, update,delete, view the data. (CRUD) operations..!  WE have to mention in the request
   I .  GET --> Fetch data
   II.  POST  --> Creating a new data like account
   III. PUT --> Updating the data 
   IV . PATCH --> Same like PUT
   V .  DELETE --> To delete data 
4. Data : client --> API --> database
5. Headers : TO send extra info from client to the server --> come from, client name, size, length, of the data 


Components of a RESPONSE 

1. Data : Server --> API --> client
2. Headers : TO send extra info from server to the client.
3. Status code : Number codes
   I. 200 -OK
   II. 404 -ERROR

The combination of base address and the routes called as URL "UNIFROM RESOURCE LOCATOR" Locating anything on the internet webpage, file or it can be a API function
Ex: 127.0.0.1/delete
127.0.0.1/delete?id=1 #Url param/query param and value is 1,then it delete the id that is related to 1 
Sending the data through urls can be more beneficial..!



------------------------------------

npm install -g nodemon
//g --> globally


-------------------------------------

// Any server that is running locally in our computer that is called as local server and the address is fixed
// 127.0.0.1 / localhost (domain name)
// To identify which server like frontend, backend, db we can identify through port number..!
// port number --> Unique id of the server
// In node js there is by default inbuild module to create server/ API endpoint by using the functions provided by the module.
// the module name is http

const http = require('http');
const fs =require('fs');
const url =require('url');

// create a server
//127.0.0.1:8000


http.createServer((req, res) => {
    // console.log(req);
    // console.log(req.url);
    // console.log(req.method);
    
    // if (req.url == "/add") {
    //   res.end("Added data")
    // }
    // else if(req.url =="/update"){
    //   res.end("Updated data")
    // }

    // if(req.url =='/pannu' && req.method=="GET"){
    //   res.end("pannu via good");
    // }

    // else if(req.url =='/pannu' && req.method =="POST"){
    //   res.end("Pannu via post");
    // }
    // else if(req.url =="/users" && req.method =="POST"){
    //   res.end("Created User")
    // }



    // res.end("Hello..! This is first response");


// if (req.url ==="/students" && req.method ==="GET"){
//   // res.end("Get students Data")
//   fs.readFile("./students.json", "utf-8",(err,data)=>{
//     if(err===null){
//       res.end(data);
//     }
//     else{
//       res.end("Data failed to be fetched")
//     }
//   })
// }

// console.log(req.url);
console.log(url.parse(req.url));
res.end("Parse Request")

  })
  .listen(8000)

//the browser by default seding a get request.
//To test API (We have to create full fleged frontend api or use API testing tool)

--------------------------------------

students.JSON
1. User can fetch all students  --> GET          /students
2. User fetch single student based on id-->GET   /students?id=2
3. 


------------------------------------2----------------------------------


  //ser fetch single student based on id --> GET /students?id=2
  // How to mention id =2 ??
  //In node js there is one inbuild module which helps us to extract data from the URL's --> url module

  // console.log(url.parse(req.url,true));

  // res.end("Parse data")

  let parseUrl = url.parse(req.url, true);
  // console.log(parseUrl);
console.log(parseUrl.query.id);

  if (parseUrl.pathname === "/students"  && parseUrl.query.id === undefined &&  req.method === "GET") {
    fs.readFile("./students.json", "utf-8", (err, data) => {
      if (err === null) {
        res.end(data);
      }
      else {
        res.end("Error fetching student data")
      }
    })
  }
  else if (parseUrl.pathname === "/students"  && parseUrl.query.id != undefined &&  req.method === "GET") {
    fs.readFile("./students.json", "utf-8", (err, data) => {
      if (err === null) {
        res.end(data)
      }
      else {
        res.end("Error fetching studne data")
      }
    })
  }
